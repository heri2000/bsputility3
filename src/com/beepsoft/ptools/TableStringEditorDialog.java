/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TableStringEditorDialog.java
 *
 * Created on Aug 24, 2009, 9:32:27 PM
 */

package com.beepsoft.ptools;

import java.awt.Font;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;

/**
 *
 * @author Heri
 */
public class TableStringEditorDialog extends javax.swing.JDialog {

    public static final int TRAILING = JTextField.TRAILING;
    public static final int LEADING = JTextField.LEADING;
    public static final int LEFT = JTextField.LEFT;
    public static final int RIGHT = JTextField.RIGHT;
    public static final int CENTER = JTextField.CENTER;
    private boolean apply = false;
    private JTable table = null;
    private int row = 0, col = 0;
    private boolean acceptReturnKey = false;
    private boolean automaticFontAdjustment = true;

    /** Creates new form TableStringEditorDialog */
    public TableStringEditorDialog(java.awt.Frame parent) {
        super(parent, false);
        initComponents();
    }

    /** Creates new form TableStringEditorDialog */
    public TableStringEditorDialog(java.awt.Dialog parent) {
        super(parent, false);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputField = new javax.swing.JTextField();

        setName("Form"); // NOI18N
        setResizable(false);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        inputField.setName("inputField"); // NOI18N
        inputField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputFieldKeyReleased(evt);
            }
        });
        getContentPane().add(inputField);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputFieldKeyReleased
        keyReleased(evt);
    }//GEN-LAST:event_inputFieldKeyReleased

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
        if (apply) {
            ok();
        } else {
            setVisible(false);
        }
    }//GEN-LAST:event_formWindowDeactivated

    public void keyReleased(java.awt.event.KeyEvent evt) {
        int keyCode = evt.getKeyCode();
        switch (keyCode) {
            case KeyEvent.VK_ESCAPE:
                cancel();
                break;
            case KeyEvent.VK_ENTER:
                if (acceptReturnKey) {
                    ok();
                }
                break;
        }
    }

    public void ok() {
        setVisible(false);
        Object obj = table.getValueAt(row, col);
        if (obj != null && obj instanceof JLabel) {
            JLabel lbl = (JLabel) obj;
            lbl.setText(inputField.getText().trim());
        } else {
            table.setValueAt(inputField.getText().trim(), row, col);
        }
    }

    public void cancel() {
        apply = false;
        setVisible(false);
    }

    public void setEditorFont(Font font) {
        inputField.setFont(font);
    }

    public void setAutomaticFontAdjustment(boolean automaticFontAdjustment) {
        this.automaticFontAdjustment = automaticFontAdjustment;
    }

    public void setHorizontalAlignment(int align) {
        inputField.setHorizontalAlignment(align);
    }

    public void showDialog(JTable table, JScrollPane scrollPane, int row, int col, java.awt.event.KeyEvent evt) {
        if (table == null || row < 0 || col < 0) {
            return;
        }
        if (automaticFontAdjustment) {
            inputField.setFont(table.getFont());
        }
        if (evt != null) {
            int keyCode = evt.getKeyCode();
            switch (keyCode) {
                case KeyEvent.VK_DELETE:
                case KeyEvent.VK_BACK_SPACE:
                    inputField.setText("");
                    ok();
                    return;
                case KeyEvent.VK_ENTER:
                case KeyEvent.VK_ESCAPE:
                case KeyEvent.VK_UP:
                case KeyEvent.VK_DOWN:
                case KeyEvent.VK_LEFT:
                case KeyEvent.VK_RIGHT:
                case KeyEvent.VK_PAGE_UP:
                case KeyEvent.VK_PAGE_DOWN:
                case KeyEvent.VK_TAB:
                case KeyEvent.VK_INSERT:
                    return;
            }
        }
        this.table = table;
        this.row = row;
        this.col = col;
        Object obj = table.getValueAt(row, col);
        String initialString = "";
        if (obj instanceof JLabel) {
            JLabel lbl = (JLabel) obj;
            initialString = lbl.getText().trim();
        } else if (obj instanceof String) {
            initialString = (String) obj;
        } else if (obj instanceof Object) {
            initialString = obj.toString();
        }
        if (scrollPane != null) {
            Point viewport = scrollPane.getViewport().getViewPosition();
            Point scrollPaneLocation = scrollPane.getLocationOnScreen();
            Rectangle cellRect = table.getCellRect(row, col, true);
            cellRect.x = cellRect.x + scrollPaneLocation.x - viewport.x;
            cellRect.y = cellRect.y + scrollPaneLocation.y - viewport.y +
                    table.getTableHeader().getHeight();
            cellRect.width += 2;
            cellRect.height += 2;
            setSize(cellRect.getSize());
            setLocation(cellRect.getLocation());
        }
        if (initialString != null &&
                initialString.length() > 0) {
            inputField.setText(initialString);
            inputField.selectAll();
        } else {
            inputField.setText("");
        }
        if (evt != null) {
            char keyChar = evt.getKeyChar();
            if (Character.isDefined(keyChar)) {
                inputField.setText(String.valueOf(keyChar));
            }
        }
        acceptReturnKey = false;
        setVisible(true);
        apply = true;
        inputField.requestFocusInWindow();
        DelayedTask delayedTask = new DelayedTask(250) {
            @Override
            public void run() {
                acceptReturnKey = true;
            }
        };
    }

    public String getText() {
        return inputField.getText();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField inputField;
    // End of variables declaration//GEN-END:variables

}
